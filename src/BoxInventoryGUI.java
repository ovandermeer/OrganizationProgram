/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author owenv
 */
import javax.swing.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

import org.json.*;

public class BoxInventoryGUI extends javax.swing.JFrame {
    int lastSelectedBoxIndex = -1;
    
    ArrayList<Room> roomList = new ArrayList<Room>();
    ArrayList<String> roomTitleList = new ArrayList<String>();

    /**
     * Creates new form BoxInventoryGUI
     */
    public BoxInventoryGUI() {
        initComponents();
    }
    
    public void newRoom(String roomName, String wallColor) {
        roomList.add(new Room(roomName, wallColor, new ArrayList<Box>(), new ArrayList<String>()));
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roomHeaderLabel = new javax.swing.JLabel();
        roomScrollPane = new javax.swing.JScrollPane();
        roomJList = new javax.swing.JList<>();
        boxHeaderLabel = new javax.swing.JLabel();
        boxScrollPane = new javax.swing.JScrollPane();
        boxJList = new javax.swing.JList<>();
        itemHeaderLabel = new javax.swing.JLabel();
        itemScrollPane = new javax.swing.JScrollPane();
        itemJList = new javax.swing.JList<>();
        newRoomLabel = new javax.swing.JLabel();
        newRoomNameLabel = new javax.swing.JLabel();
        newRoomNameTextField = new javax.swing.JTextField();
        newRoomWallColourLabel = new javax.swing.JLabel();
        newRoomWallColourTextField = new javax.swing.JTextField();
        newBoxLabel = new javax.swing.JLabel();
        newBoxNameLabel = new javax.swing.JLabel();
        newBoxNameTextField = new javax.swing.JTextField();
        newBoxColourLabel = new javax.swing.JLabel();
        newBoxColourTextField = new javax.swing.JTextField();
        newItemLabel = new javax.swing.JLabel();
        newItemNameLabel = new javax.swing.JLabel();
        newItemNameTextField = new javax.swing.JTextField();
        newRoomCreateButton = new javax.swing.JButton();
        newBoxCreateButton = new javax.swing.JButton();
        newItemCreateButton = new javax.swing.JButton();
        searchLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        deleteRoomButton = new javax.swing.JButton();
        deleteItemButton = new javax.swing.JButton();
        deleteBoxButton = new javax.swing.JButton();
        saveDataButton = new javax.swing.JButton();
        loadDataButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        roomHeaderLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        roomHeaderLabel.setForeground(new java.awt.Color(0, 102, 255));
        roomHeaderLabel.setText("Room");

        roomJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                roomJListValueChanged(evt);
            }
        });
        roomScrollPane.setViewportView(roomJList);

        boxHeaderLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        boxHeaderLabel.setForeground(new java.awt.Color(0, 102, 255));
        boxHeaderLabel.setText("Box");

        boxJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                boxJListValueChanged(evt);
            }
        });
        boxScrollPane.setViewportView(boxJList);

        itemHeaderLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        itemHeaderLabel.setForeground(new java.awt.Color(0, 102, 255));
        itemHeaderLabel.setText("Items");

        itemJList.setFocusable(false);
        itemScrollPane.setViewportView(itemJList);

        newRoomLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        newRoomLabel.setText("New Room:");

        newRoomNameLabel.setText("Name:");

        newRoomWallColourLabel.setText("Wall colour");

        newBoxLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        newBoxLabel.setText("New Box:");

        newBoxNameLabel.setText("Name:");

        newBoxNameTextField.setToolTipText("");

        newBoxColourLabel.setText("Colour");

        newItemLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        newItemLabel.setText("New Item:");

        newItemNameLabel.setText("Name:");

        newRoomCreateButton.setText("Create!");
        newRoomCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRoomCreateButtonActionPerformed(evt);
            }
        });

        newBoxCreateButton.setText("Create!");
        newBoxCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBoxCreateButtonActionPerformed(evt);
            }
        });

        newItemCreateButton.setText("Create!");
        newItemCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newItemCreateButtonActionPerformed(evt);
            }
        });

        searchLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 15)); // NOI18N
        searchLabel.setText("Search for an item (Case sensitive search):");

        searchButton.setText("Search!");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        deleteRoomButton.setForeground(new java.awt.Color(255, 51, 0));
        deleteRoomButton.setText("Delete selected room");
        deleteRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoomButtonActionPerformed(evt);
            }
        });

        deleteItemButton.setForeground(new java.awt.Color(255, 51, 0));
        deleteItemButton.setText("Delete selected item");
        deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemButtonActionPerformed(evt);
            }
        });

        deleteBoxButton.setForeground(new java.awt.Color(255, 51, 0));
        deleteBoxButton.setText("Delete selected box");
        deleteBoxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBoxButtonActionPerformed(evt);
            }
        });

        saveDataButton.setText("Save all data");
        saveDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataButtonActionPerformed(evt);
            }
        });

        loadDataButton.setText("Reload all data");
        loadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(newRoomLabel))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(deleteRoomButton)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(newRoomWallColourLabel)
                                                .addComponent(newRoomNameLabel))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(newRoomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(newRoomWallColourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(6, 6, 6)
                                                    .addComponent(newRoomCreateButton)))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(roomScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(roomHeaderLabel)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(boxScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(newBoxColourLabel)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(newBoxNameLabel)
                                                    .addGap(6, 6, 6)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(newBoxLabel)
                                                .addComponent(newBoxColourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(6, 6, 6)
                                                    .addComponent(newBoxCreateButton))
                                                .addComponent(newBoxNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(deleteBoxButton)))
                                .addGap(28, 28, 28))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boxHeaderLabel)
                                .addGap(80, 80, 80)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(deleteItemButton)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(itemScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(newItemNameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(newItemCreateButton)
                                            .addComponent(newItemNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(newItemLabel)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchButton)
                                    .addComponent(itemHeaderLabel))
                                .addGap(32, 32, 32))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(searchLabel)
                            .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(saveDataButton)
                        .addGap(113, 113, 113)
                        .addComponent(loadDataButton)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(searchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(roomHeaderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(newRoomLabel)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newRoomNameLabel)
                            .addComponent(newRoomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newRoomWallColourLabel)
                            .addComponent(newRoomWallColourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newRoomCreateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteRoomButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(itemHeaderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(newItemLabel)
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newItemNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newItemNameLabel))
                        .addGap(18, 18, 18)
                        .addComponent(newItemCreateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteItemButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boxHeaderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(newBoxNameLabel)
                                    .addComponent(newBoxNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(newBoxColourLabel)
                                    .addComponent(newBoxColourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(newBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(newBoxCreateButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteBoxButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveDataButton)
                    .addComponent(loadDataButton))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Function: Creates a new room
     * Pre-conditions: A value must be entered into both the 'Name' and 'Wall colour' fields
     * Post-condition: A new room object is created with the properties of the given name and wall colour. An empty list of
     * box objects is also created. This room object is added to the array of room objects used by the GUI
     */
    private void newRoomCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRoomCreateButtonActionPerformed
        if(newRoomNameTextField.getText().equals("") || newRoomWallColourTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(new JFrame(), "Both a room name and a wall colour is required to make a new room.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int initialSelectedIndex = roomJList.getSelectedIndex();

            roomList.add(new Room(newRoomNameTextField.getText(), newRoomWallColourTextField.getText(), new ArrayList<Box>(), new ArrayList<String>()));
            roomTitleList.add(newRoomNameTextField.getText());

            roomJList.setListData(Arrays.copyOf(roomTitleList.toArray(), roomTitleList.toArray().length, String[].class));

            if (initialSelectedIndex != -1) {
                roomJList.setSelectedIndex(initialSelectedIndex);
            } else {
                roomJList.setSelectedIndex(0);
            }

            newRoomNameTextField.setText("");
            newRoomWallColourTextField.setText("");
        }
    }//GEN-LAST:event_newRoomCreateButtonActionPerformed

    /**
     * Function: Creates a new box object
     * Pre-conditions: A room must be selected for the box to be put into, and a value must be entered into both the 'Name'
     * and 'Colour' fields
     * Post-condition: A new box object is created with the given name and colour as properties. A new String array is created
     * to store items in. This object is added to the box array of the overlying room
     */
    private void newBoxCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBoxCreateButtonActionPerformed
        if(roomJList.getSelectedIndex() != -1) {
            if(newBoxNameTextField.getText().equals("") || newBoxColourTextField.getText().equals("")) {
                JOptionPane.showMessageDialog(new JFrame(), "Both a name and a colour is required to make a new box.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                int initialSelectedIndex = boxJList.getSelectedIndex();

                Room selectedRoom = roomList.get(roomJList.getSelectedIndex());

                selectedRoom.boxList.add(new Box(newBoxNameTextField.getText(), newBoxColourTextField.getText(), new ArrayList<String>()));
                selectedRoom.boxTitleList.add(newBoxNameTextField.getText());

                boxJList.setListData(Arrays.copyOf(selectedRoom.boxTitleList.toArray(), selectedRoom.boxTitleList.toArray().length, String[].class));

                if(initialSelectedIndex != -1) {
                    boxJList.setSelectedIndex(initialSelectedIndex);
                } else {
                    boxJList.setSelectedIndex(0);
                }

                newBoxNameTextField.setText("");
                newBoxColourTextField.setText("");
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "You must select a room before you can create a box!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_newBoxCreateButtonActionPerformed

    /**
     * Function: Adds a new item to the selected box in the selected room
     * Pre-conditions: A name for the item must be entered into the 'Name' field, and both a room and a box must be selected
     * Post-condition: The string for the item has been added to the list of items in the selected box
     */
    private void newItemCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newItemCreateButtonActionPerformed
        if(roomJList.getSelectedIndex() != -1) {
            if(boxJList.getSelectedIndex() != -1) {
                if(newItemNameTextField.getText().equals("")) {
                    JOptionPane.showMessageDialog(new JFrame(), "A name is required to create a new item.", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    Box selectedBox = roomList.get(roomJList.getSelectedIndex()).boxList.get(boxJList.getSelectedIndex());
                    selectedBox.boxContents.add(newItemNameTextField.getText());
                    itemJList.setListData(Arrays.copyOf(selectedBox.boxContents.toArray(), selectedBox.boxContents.toArray().length, String[].class));
                }
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "You must select a box before you can create an item!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "You must select a room before you can create an item!", "Error", JOptionPane.ERROR_MESSAGE);
        }

        newItemNameTextField.setText("");
    }//GEN-LAST:event_newItemCreateButtonActionPerformed

    /**
     * Function: Refreshes the values in the boxJList when the selected room value is changed
     * Post-condition: The boxJList has been updated to reflect the boxes in the selected room. If the boxList is empty for that room,
     * the itemList is also replaced to be blank.
     */
    private void roomJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_roomJListValueChanged
        if(roomJList.getModel().getSize() == 0) {
            boxJList.setListData(new String[0]);
            itemJList.setListData(new String[0]);
        }

        if(roomJList.getSelectedIndex() != -1) {
            Room selectedRoom = roomList.get(roomJList.getSelectedIndex());
            boxJList.setListData(Arrays.copyOf(selectedRoom.boxTitleList.toArray(), selectedRoom.boxTitleList.toArray().length, String[].class));

            if(selectedRoom.boxList.size() != 0) {
                boxJList.setSelectedIndex(0);
                itemJList.setListData(Arrays.copyOf(selectedRoom.boxList.get(0).boxContents.toArray(), selectedRoom.boxList.get(0).boxContents.toArray().length, String[].class));
            } else {
                itemJList.setListData(new String[0]);
            }
        }
    }//GEN-LAST:event_roomJListValueChanged

    /**
     * Function: Refreshes the values in the itemJList when the selected box value is changed
     * Post-condition: Updates the itemJList to reflect what is in the new box
     */
    private void boxJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_boxJListValueChanged
        if(boxJList.getModel().getSize() == 0) {
            itemJList.setListData(new String[0]);
        }

        if(boxJList.getSelectedIndex() != -1) {
            Box selectedBox = roomList.get(roomJList.getSelectedIndex()).boxList.get(boxJList.getSelectedIndex());
            itemJList.setListData(Arrays.copyOf(selectedBox.boxContents.toArray(), selectedBox.boxContents.toArray().length, String[].class));
        }
    }//GEN-LAST:event_boxJListValueChanged

    /**
     * Function: Searches all boxes in all rooms to attempt to locate the searched item
     * Pre-conditions: There must be a value in the searchTextField
     * Post-condition: The user is informed in what rooms and in what boxes the item is found in. If none, the user is informed.
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        boolean foundItem = false;

        String searchResult = "Item found in the following locations:\n\n";

        String searchTerm = searchTextField.getText();

        if(searchTerm.equals("")) {
            JOptionPane.showMessageDialog(new JFrame(), "Please enter a search value!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for(int i = 0; i < roomList.size(); i++) {
            ArrayList<Box> foundBoxesFromRoom = roomList.get(i).checkBoxesForItem(searchTerm);

            if(foundBoxesFromRoom.size() != 0) {
                foundItem = true;
                searchResult += "In room labelled '" + roomList.get(i).roomName + "' (" + roomList.get(i).wallColor + " coloured walls):\n";

                for(int j = 0; j < foundBoxesFromRoom.size(); j++) {
                    searchResult += "\t• " + foundBoxesFromRoom.get(j).boxColor + " coloured box with label '" + foundBoxesFromRoom.get(j).label + "'\n";
                }
            }
        }

        if(foundItem) {
            JOptionPane.showMessageDialog(new JFrame(), searchResult, "Search result", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "The item '" + searchTerm + "' could not be found. Have you checked to make sure you spelled the item correctly? Remember, search is case sensitive!", "Search result", JOptionPane.WARNING_MESSAGE);
        }

        searchTextField.setText("");

    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Function: Deletes the selected room from the roomList
     * Pre-conditions: A room must be selected for removal
     * Post-condition: After confirmation from the user, the room and all associated boxes and items is deleted. The roomJList is then
     * updated with a new list and the selected room removed. The room directly above the deleted room is selected, and the roomJListValueChanged
     * function will proceed to update the boxJList and itemJList values
     */
    private void deleteRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoomButtonActionPerformed
        if(roomJList.getSelectedIndex() != -1 ) {
            Room selectedRoom = roomList.get(roomJList.getSelectedIndex());

            int result = JOptionPane.showConfirmDialog(new JFrame(),"Are you sure you want to delete the room " + selectedRoom.roomName + "? All associated boxes and items will also be lost. This action cannot be undone!", "Confirm deletion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if(result == JOptionPane.YES_OPTION){
                int roomIndex = roomJList.getSelectedIndex();
                int arrayLength = roomList.size();

                roomList.remove(selectedRoom);
                roomTitleList.remove(selectedRoom.roomName);

                roomJList.setListData(Arrays.copyOf(roomTitleList.toArray(), roomTitleList.toArray().length, String[].class));
                roomJList.setSelectedIndex(roomIndex-1);

                if(roomIndex == arrayLength-1) {
                    roomJList.setSelectedIndex(roomIndex-1);
                } else {
                    roomJList.setSelectedIndex(roomIndex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "No room is selected!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteRoomButtonActionPerformed

    /**
     * Function: Deletes the selected item from the boxContents in the selected room
     * Pre-conditions: An item must be selected for removal
     * Post-condition: After confirmation from the user, the item is deleted. The associated room and box is not removed. The itemJList is then
     * updated with a new list and the selected item removed.
     */
    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
        if(boxJList.getSelectedIndex() != -1 ) {
            Box selectedBox = roomList.get(roomJList.getSelectedIndex()).boxList.get(boxJList.getSelectedIndex());
            String selectedItem = selectedBox.boxContents.get(itemJList.getSelectedIndex());

            int result = JOptionPane.showConfirmDialog(new JFrame(),"Are you sure you want to delete the item " + selectedItem + "? All associated items will also be lost. This action cannot be undone!", "Confirm deletion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if(result == JOptionPane.YES_OPTION){
                selectedBox.boxContents.remove(selectedItem);
                itemJList.setListData(Arrays.copyOf(selectedBox.boxContents.toArray(), selectedBox.boxContents.toArray().length, String[].class));
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "No item is selected!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    /**
     * Function: Deletes the selected item from the boxContents in the selected room
     * Pre-conditions: A box must be selected for removal
     * Post-condition: After confirmation from the user, the box and all associated items is deleted. The associated room is not removed. The boxJList is then
     * updated with a new list and the selected box removed. The box directly above the deleted box is selected, and the boxJListValueChanged
     * function will proceed to update the itemJList value
     */
    private void deleteBoxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBoxButtonActionPerformed
        if(boxJList.getSelectedIndex() != -1 ) {
            Room selectedRoom = roomList.get(roomJList.getSelectedIndex());
            Box selectedBox = selectedRoom.boxList.get(boxJList.getSelectedIndex());

            int result = JOptionPane.showConfirmDialog(new JFrame(),"Are you sure you want to delete the box " + selectedBox.label + "? All associated items will also be lost. This action cannot be undone!", "Confirm deletion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if(result == JOptionPane.YES_OPTION){
                int boxIndex = boxJList.getSelectedIndex();
                int arrayLength = selectedRoom.boxList.size();

                selectedRoom.boxList.remove(selectedBox);
                selectedRoom.boxTitleList.remove(selectedBox.label);

                boxJList.setListData(Arrays.copyOf(selectedRoom.boxTitleList.toArray(), selectedRoom.boxTitleList.toArray().length, String[].class));

                if(boxIndex == arrayLength-1) {
                    boxJList.setSelectedIndex(boxIndex-1);
                } else {
                    boxJList.setSelectedIndex(boxIndex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "No box is selected!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteBoxButtonActionPerformed

    /**
     * Function: Serializes all room, box, and item data into a JSON format, and saves it to a file
     * Post-condition: The currently entered data is saved to the file 'SavedData.json'
     */
    private void saveDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDataButtonActionPerformed

        try {
            File myObj = new File("SavedData.json");
            if (!myObj.createNewFile()) {
                int result = JOptionPane.showConfirmDialog(new JFrame(),"Save data already exists! Do you want to overwrite the old data?", "Confirm overwrite?",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE);

                if(result != JOptionPane.YES_OPTION) {
                    return;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(new JFrame(), "An unknown error occurred when trying to create save data.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        String jsonString = "{\"roomList\": [";
        for(int i = 0; i < roomList.size(); i++) {
            jsonString += roomList.get(i).exportToJSON();

            if(i != roomList.size()-1) {
                jsonString += ",";
            }
        }

        jsonString += "], \"roomTitleList\": [";

        for(int i = 0; i< roomTitleList.size(); i++) {
            jsonString += "\"" + roomTitleList.get(i) + "\"";

            if(i != roomTitleList.size()-1) {
                jsonString += ",";
            }
        }

        jsonString += "]}";

        try {
            FileWriter myWriter = new FileWriter("SavedData.json");
            myWriter.write(jsonString);
            myWriter.close();
            JOptionPane.showMessageDialog(new JFrame(), "Data saved successfully!", "Notice", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(new JFrame(), "An unknown error occurred when trying to write save data to the file.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveDataButtonActionPerformed

    /**
     * Function: Overwrites currently present program data with the saved data
     * Post-condition: Loads saved data from the 'SavedData.json' file, and updates all room, box, and item values to reflect that
     * of the saved data
     */
    private void loadDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataButtonActionPerformed
        int result = JOptionPane.showConfirmDialog(new JFrame(),"Are you sure you want to reload data from the file? All currently entered data will be overridden!", "Confirm reload?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
        if(result == JOptionPane.YES_OPTION) {

            String jsonString = "";

            try {
                File myObj = new File("SavedData.json");
                Scanner myReader = new Scanner(myObj);
                jsonString = myReader.nextLine();
                myReader.close();
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(new JFrame(), "No saved data was found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            roomList.clear();
            roomTitleList.clear();

            JSONObject obj = null;

            try {
                obj = new JSONObject(jsonString);
            } catch (JSONException e) {
                JOptionPane.showMessageDialog(new JFrame(), "An error occurred when trying to load the saved data, the data is most likely corrupted.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            JSONArray JSONRoomList = obj.getJSONArray("roomList");

            for (int i = 0; i < JSONRoomList.length(); i++) {
                JSONObject JSONRoomData = JSONRoomList.getJSONObject(i);
                JSONArray JSONBoxList = JSONRoomData.getJSONArray("boxList");
                ArrayList<Box> boxList = new ArrayList<Box>();

                for (int j = 0; j < JSONBoxList.length(); j++) {
                    JSONObject JSONBoxData = JSONBoxList.getJSONObject(j);
                    JSONArray JSONBoxContents = JSONBoxData.getJSONArray("boxContents");
                    ArrayList<String> boxContents = new ArrayList<String>();

                    for (int k = 0; k < JSONBoxContents.length(); k++) {
                        boxContents.add(JSONBoxContents.getString(k));
                    }

                    boxList.add(new Box(JSONBoxData.getString("label"), JSONBoxData.getString("boxColor"), boxContents));
                }

                JSONArray JSONBoxTitleList = JSONRoomData.getJSONArray("boxTitleList");
                ArrayList<String> boxTitleList = new ArrayList<String>();

                for (int j = 0; j < JSONBoxTitleList.length(); j++) {
                    boxTitleList.add(JSONBoxTitleList.getString(j));
                }

                roomList.add(new Room(JSONRoomData.getString("roomName"), JSONRoomData.getString("wallColour"), boxList, boxTitleList));
            }

            JSONArray JSONRoomTitleList = obj.getJSONArray("roomTitleList");

            for (int i = 0; i < JSONRoomTitleList.length(); i++) {
                roomTitleList.add(JSONRoomTitleList.getString(i));
            }

            roomJList.setListData(Arrays.copyOf(roomTitleList.toArray(), roomTitleList.toArray().length, String[].class));
            roomJList.setSelectedIndex(0);
        }
    }//GEN-LAST:event_loadDataButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoxInventoryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoxInventoryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoxInventoryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoxInventoryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoxInventoryGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel boxHeaderLabel;
    private javax.swing.JList<String> boxJList;
    private javax.swing.JScrollPane boxScrollPane;
    private javax.swing.JButton deleteBoxButton;
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JButton deleteRoomButton;
    private javax.swing.JLabel itemHeaderLabel;
    private javax.swing.JList<String> itemJList;
    private javax.swing.JScrollPane itemScrollPane;
    private javax.swing.JButton loadDataButton;
    private javax.swing.JLabel newBoxColourLabel;
    private javax.swing.JTextField newBoxColourTextField;
    private javax.swing.JButton newBoxCreateButton;
    private javax.swing.JLabel newBoxLabel;
    private javax.swing.JLabel newBoxNameLabel;
    private javax.swing.JTextField newBoxNameTextField;
    private javax.swing.JButton newItemCreateButton;
    private javax.swing.JLabel newItemLabel;
    private javax.swing.JLabel newItemNameLabel;
    private javax.swing.JTextField newItemNameTextField;
    private javax.swing.JButton newRoomCreateButton;
    private javax.swing.JLabel newRoomLabel;
    private javax.swing.JLabel newRoomNameLabel;
    private javax.swing.JTextField newRoomNameTextField;
    private javax.swing.JLabel newRoomWallColourLabel;
    private javax.swing.JTextField newRoomWallColourTextField;
    private javax.swing.JLabel roomHeaderLabel;
    private javax.swing.JList<String> roomJList;
    private javax.swing.JScrollPane roomScrollPane;
    private javax.swing.JButton saveDataButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
}
